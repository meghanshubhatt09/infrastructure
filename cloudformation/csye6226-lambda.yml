AWSTemplateFormatVersion: "2010-09-09"
Description: VPC-Lambda Function - To send user email for verification

Parameters:
  ApplicationStackName: 
    Description: "Application Stack Name"
    Type: "String"

  domainName: 
    Description: "domain Name for S3 Bucket Naming"
    Type: "String"
    AllowedValues: ["dev.meghanshubhatt.me"]
        

Resources:
  lambdaExecutionRoleId: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      Path: "/"
      RoleName: "LambdaExecutionRole"
      ManagedPolicyArns: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags :
        - Key : Name
          Value  : !Sub ${AWS::StackName}-LambdaExecutionRoleId

  lambdaFunctionId: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "csye6225"
      Code: 
        - S3Bucket: !Sub "code-deploy.${domainName}" 
          S3Key: "aws-lambda-0.0.1.zip"
      
      Handler: "EmailEvent::handleRequest"
      Environment: 
        Variables: 
          domain: !Ref domainName
          fromemail : !Ref domainName
          ttl : 15
          table: Fn::ImportValue
                    !Sub "${ApplicationStackName}-dynamoDBTable"

      Role:
        Fn::GetAtt: 
        - lambdaExecutionRoleId
        - Arn
      Runtime: java17
      Timeout: 300
      MemorySize: 512
      ReservedConcurrentExecutions: 5
      Tags : 
        - Key : "Name"
          Value : !Sub "${AWS::StackName}-Email"

        - Key : "Application Role"
          Value : "Email Lambda"


  topicId: 
    Type: "AWS::SNS::Topic"
    DependsOn: lambdaFunctionId
    Properties:
      Subscription: 
        - Endpoint : 
            Fn::GetAtt: 
              - lambdaFunctionId
              - Arn
          Protocol : "lambda"
      TopicName : "email"


  lambdaPermission: 
    Type: "AWS::Lambda::Permission"
    DependsOn: lambdaFunctionId
    Properties: 
      FunctionName: !Ref lambdaFunctionId
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref topicId



  lambdaPolicy : 
    Type : "AWS::IAM::ManagedPolicy"
    DependsOn: "topicId"
    Properties : 
      ManagedPolicyName : "lambdaPolicy"
      PolicyDocument :  
          Version : "2012-10-17"
          Statement : 
            - Sid: "LambdaDynamoDBAccess"
              Effect: "Allow"
              Action : ["dynamodb:GetItem", "dynamodb:PutItem", "dynamodb:UpdateItem"]
              Resource : Fn::ImportValue
                            !Sub "${ApplicationStackName}-dynamoDBArn"
            - Sid : "LambdaSESAccess"
              Effect: "Allow"
              Action: ["ses:VerifyEmailAddress","ses:SendEmail","ses:SendRawEmail"]
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"

            - Sid : "LambdaS3Access"
              Effect: "Allow"
              Action: [ "s3:GetObject"]
              Resource: !Sub "arn:aws:s3:::code-deploy.${domainName}/*" 

            - Sid : "LambdaSNSAccess"
              Effect: "Allow"
              Action: [ "sns:ConfirmSubscription"]
              Resource: !Ref topicId

      Roles: !Ref lambdaExecutionRoleId


  topicPolicy : 
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: "topicId"
    Properties : 
      ManagedPolicyName: "EC2TopicAccessPolicy"
      PolicyDocument :  
        Version : "2012-10-17"
        Statement: 
          - Sid : "AllowEC2ToPublishToSNSTopic"
            Effect : "Allow"
            Action : [ "sns:Publish", "sns:CreateTopic"]
            Resource" : !Ref topicId
      Roles: Fn::ImportValue 
                !Sub "${CircleCIStackName}-ec2ExecutionRoleId"

Outputs:
  

    




    

